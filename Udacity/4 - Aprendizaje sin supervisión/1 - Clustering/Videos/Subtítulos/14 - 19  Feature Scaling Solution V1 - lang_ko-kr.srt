1

00:00:00,000  -->  00:00:03,930
거리 기반 머신러닝 모델에서는

2

00:00:03,930  -->  00:00:05,860
데이터를 스케일링하고 싶을 것입니다.

3

00:00:05,860  -->  00:00:09,330
보유한 기능이 완전히 다른 스케일을 가지고 있는 경우

4

00:00:09,330  -->  00:00:13,285
k-평균 알고리즘은 완전히 다른 클러스터를 생성할 수 있습니다.

5

00:00:13,285  -->  00:00:14,699
이 notebook에서 우리는

6

00:00:14,699  -->  00:00:18,309
사람들이 데이터를 스케일링하는 데 사용하는 가장 일반적인 방법을 살펴봅니다.

7

00:00:18,309  -->  00:00:22,589
먼저 필요한 라이브러리를 읽고

8

00:00:22,589  -->  00:00:24,434
DF에 저장될 데이터세트를 생성합니다.

9

00:00:24,434  -->  00:00:27,824
우리가 첫 번째로 해야 할 일은 데이터를 살펴보는 것입니다.

10

00:00:27,824  -->  00:00:29,864
그럼 헤더부터 살펴보죠.

11

00:00:29,864  -->  00:00:31,669
열은 2개뿐인 것 같습니다.

12

00:00:31,670  -->  00:00:33,785
하나는 높이고, 하나는 무게군요.

13

00:00:33,784  -->  00:00:36,934
원한다면 설명을 살펴보거나

14

00:00:36,935  -->  00:00:41,630
서로 플롯을 작성해볼 수도 있습니다.

15

00:00:41,630  -->  00:00:44,125
일반적으로 전 이 두 가지 일을 하죠.

16

00:00:44,125  -->  00:00:47,335
또한 모양을 보는 것이 유용할 때도 있습니다.

17

00:00:47,335  -->  00:00:49,350
여기에는 200개의 행과

18

00:00:49,350  -->  00:00:52,285
2개의 열이 있고, 누락된 값은 없는 것 같군요.

19

00:00:52,284  -->  00:00:55,459
널리 사용되는 스케일링 방법에는 두 가지 유형이 있습니다.

20

00:00:55,460  -->  00:00:59,314
하나는 MinMaxScaler이고 다른 하나는 StandardScaler입니다.

21

00:00:59,314  -->  00:01:02,219
MinMaxScaler는 0과 1 사이의 모든 것을 스케일링합니다.

22

00:01:02,219  -->  00:01:06,894
반면 StandardScaler는 평균이 0이고 분산이 1이 되도록 모든 것을 스케일링합니다.

23

00:01:06,894  -->  00:01:09,644
이 두 가지를 모두 살펴보고 연습해 보도록 하죠.

24

00:01:09,644  -->  00:01:12,589
여기에서는 기본적으로

25

00:01:12,590  -->  00:01:17,520
데이터에 대한 맞춤 및 변환을 모두 한 단계에서 인스턴스화하고 있음을 알 수 있습니다.

26

00:01:17,519  -->  00:01:19,795
그리고는 StandardScaler,

27

00:01:19,795  -->  00:01:24,820
특성 스케일링이 있는 데이터 프레임을 나타내는 데 사용할 수 있도록 df_ss에 저장합니다.

28

00:01:24,819  -->  00:01:28,625
그러면 여기에서는 데이터 프레임으로 다시 전환하고

29

00:01:28,625  -->  00:01:30,114
열에 추가한 다음,

30

00:01:30,114  -->  00:01:34,099
데이터세트의 산점도를 빠르게 작성합니다. 그건 이렇게 보이죠.

31

00:01:34,099  -->  00:01:38,434
원할 경우 원본 데이터세트로 이 작업을 수행할 수도 있습니다.

32

00:01:38,435  -->  00:01:40,750
그러면 이것처럼 보이죠.

33

00:01:40,750  -->  00:01:42,920
여기에서는 거의 동일하게 보이죠.

34

00:01:42,920  -->  00:01:45,900
그리고 이제는 MinMaxScaler를 사용하여 동일한 작업을 수행하기를 원합니다.

35

00:01:45,900  -->  00:01:47,900
그럼 직접 연습을 좀 해볼까요.

36

00:01:47,900  -->  00:01:52,250
기본적으로 동일한 프로세스를 수행할 예정인데,

37

00:01:52,250  -->  00:01:54,685
이번에는 MinMaxScaler를 사용하는 것입니다.

38

00:01:54,685  -->  00:01:58,195
즉 StandardScaler 대신

39

00:01:58,194  -->  00:02:04,069
MinMaxScaler를 사용해 맞춤 변환을 수행합니다.

40

00:02:04,069  -->  00:02:10,084
이 MM을 호출한 다음 여기와 유사하게

41

00:02:10,085  -->  00:02:12,465
데이터 프레임으로 전환하려 합니다.

42

00:02:12,465  -->  00:02:15,504
열 이름을 변경하고 데이터를 플롯으로 작성합니다.

43

00:02:15,504  -->  00:02:22,280
이것이 열이 되고, 서로에 대한 플롯이 되는 거죠.

44

00:02:22,280  -->  00:02:24,004
아, 셀은 실행하지 않았습니다.

45

00:02:24,004  -->  00:02:27,500
여기에서는 StandardScaler를 사용하는 것을 볼 수 있습니다.

46

00:02:27,500  -->  00:02:31,115
둘 다 0을 중심으로 하고, 기본적으로 이 축에서

47

00:02:31,115  -->  00:02:34,710
3과 -3 사이, -2와 2 사이에 있습니다.

48

00:02:34,710  -->  00:02:37,270
하지만 조금 더 넘어서 간 다음

49

00:02:37,270  -->  00:02:38,939
이 데이터세트를 보면

50

00:02:38,939  -->  00:02:42,164
각 변수에 대해 0과 1 사이에 있음을 볼 수 있습니다.

51

00:02:42,164  -->  00:02:45,049
즉 MinMaxScaler는 0과 1 사이의 것을 스케일링하지만

52

00:02:45,050  -->  00:02:51,260
StandardScaler는 1의 평균 제로 표준 편차 또는 1의 분산을 갖습니다.

53

00:02:51,259  -->  00:02:54,579
그러므로 이 높이-무게 데이터세트에서 10개의 각기 다른 클러스터를 만든 경우

54

00:02:54,580  -->  00:03:00,070
어떻게 보이는지 알 수 있죠.

55

00:03:00,069  -->  00:03:05,209
이 마지막 부분에서는 스케일 데이터세트로 이를 수행하길 원합니다.

56

00:03:05,210  -->  00:03:08,900
이것은 일반 데이터를 사용했지만

57

00:03:08,900  -->  00:03:12,105
스케일 데이터세트를 사용해 동일한 작업을 수행할 수 있습니다.

58

00:03:12,104  -->  00:03:19,604
그중 하나는 SS라고 하고, 마지막은 MM이라고 하죠.

59

00:03:19,604  -->  00:03:21,514
그리고 특히 이 경우

60

00:03:21,514  -->  00:03:23,474
스케일링은 중요하지 않은 것 같습니다.

61

00:03:23,474  -->  00:03:24,810
그래서 답변에서는

62

00:03:24,810  -->  00:03:28,314
이 경우 왜 스케일링이 그다지 중요하지 않은지에 대해 쓸 수 있습니다.

63

00:03:28,314  -->  00:03:29,805
하지만 다른 상황에서는

64

00:03:29,805  -->  00:03:34,129
스케일링이 이 클러스터를 완전히 변경하는 경우일 수도 있습니다.
