1
00:00:00,000 --> 00:00:04,440
勾配降下法アルゴリズムが
どのようなものか 見ていきましょう

2
00:00:04,440 --> 00:00:08,990
Errorest山の頂上から下山する例を
思い出してください

3
00:00:08,990 --> 00:00:10,852
下山するには

4
00:00:10,852 --> 00:00:16,500
高さの負の勾配に従って
歩みを進める必要があります

5
00:00:16,500 --> 00:00:19,280
これが誤差関数です

6
00:00:19,280 --> 00:00:21,289
それぞれの１歩はエポックと呼ばれます

7
00:00:21,289 --> 00:00:23,504
ですから歩数を参照するときには

8
00:00:23,504 --> 00:00:25,960
エポックの数を参照することになります

9
00:00:25,960 --> 00:00:27,809
さて各エポックでは
何が起こっているでしょう

10
00:00:27,809 --> 00:00:29,760
各エポックですべての
データである入力を利用し

11
00:00:29,760 --> 00:00:34,920
ニューラルネットワーク
全体を通じて実行します

12
00:00:34,920 --> 00:00:36,840
すると予測が見つかり

13
00:00:36,840 --> 00:00:38,729
実際のラベルから
どれぐらいずれているかを

14
00:00:38,728 --> 00:00:41,859
示す誤差が計算されます

15
00:00:41,859 --> 00:00:44,548
最後に この誤差を誤差逆伝播法で処理し

16
00:00:44,548 --> 00:00:48,048
ニューラルネットワークの重みを更新します

17
00:00:48,048 --> 00:00:51,405
これによりデータを予測する
境界が改善されます

18
00:00:51,405 --> 00:00:53,895
これはすべてのデータに対して行われます

19
00:00:53,895 --> 00:00:55,607
通常は非常に多数の

20
00:00:55,606 --> 00:00:57,057
データポイントがあるので

21
00:00:57,057 --> 00:00:59,660
これらは巨大なマトリクスの計算になり

22
00:00:59,659 --> 00:01:03,993
膨大なメモリを使用します

23
00:01:03,993 --> 00:01:05,358
１歩ずつに対して適用するのです

24
00:01:05,358 --> 00:01:09,059
歩数が多くなるほど

25
00:01:09,060 --> 00:01:12,094
長い時間と強い計算力が
必要になると想像できます

26
00:01:12,093 --> 00:01:17,765
何かよい方法はあるのでしょうか？

27
00:01:17,765 --> 00:01:19,454
１歩ごとに データを代入する必要があるのか
という疑問が浮かびますね

28
00:01:19,453 --> 00:01:21,949
データがよく分散されている場合

29
00:01:21,950 --> 00:01:24,775
小さなサブセットにより
勾配がどのようになるか

30
00:01:24,775 --> 00:01:28,299
ある程度想像がつきます

31
00:01:28,299 --> 00:01:29,825
最適な推測はできないかも
しれませんが 速いです

32
00:01:29,825 --> 00:01:31,599
そして繰り返しているため

33
00:01:31,599 --> 00:01:35,459
よい状態になっているかもしれません

34
00:01:35,459 --> 00:01:40,489
ここで確率的勾配降下法が出番となります

35
00:01:40,489 --> 00:01:42,424
確率的勾配降下法の考え方はデータの
小さなサブセットを利用して

36
00:01:42,424 --> 00:01:45,319
ニューラルネットワークで実行し

37
00:01:45,319 --> 00:01:49,030
これらの点に基づいて

38
00:01:49,030 --> 00:01:51,799
誤差関数の勾配を計算し
その方向に１歩動くというものです

39
00:01:51,799 --> 00:01:53,390
それでも全データを使用したいので

40
00:01:53,390 --> 00:01:56,564
次のようなことを行います

41
00:01:56,563 --> 00:01:59,818
データを複数のバッチに分けるのです

42
00:01:59,819 --> 00:02:03,405
この例では24の点があります

43
00:02:03,405 --> 00:02:08,359
６点で構成される
４つのバッチに分けます

44
00:02:08,359 --> 00:02:14,000
１つ目のバッチの点を利用して
ニューラルネットワークで実行し

45
00:02:14,000 --> 00:02:15,335
誤差と勾配を計算し 重みを更新する
ために誤差逆伝播法で処理します

46
00:02:15,335 --> 00:02:19,370
これにより新しい重みが得られ

47
00:02:19,370 --> 00:02:24,655
左図のように 適切な
境界領域が定義されます

48
00:02:24,655 --> 00:02:29,259
次に２つ目のバッチの点を
利用し 同じことをします

49
00:02:29,258 --> 00:02:32,258
より適切な重みと境界領域が得られます

50
00:02:32,258 --> 00:02:37,244
３つ目のバッチに対しても同じことをします

51
00:02:37,245 --> 00:02:39,099
そして最後に４つ目のバッチ
に対しても行い これで完了です

52
00:02:39,098 --> 00:02:41,384
ここでは４ステップありましたが

53
00:02:41,384 --> 00:02:43,573
通常の勾配降下法では

54
00:02:43,574 --> 00:02:46,710
全データで１ステップしか

55
00:02:46,710 --> 00:02:52,405
ないことに注意してください

