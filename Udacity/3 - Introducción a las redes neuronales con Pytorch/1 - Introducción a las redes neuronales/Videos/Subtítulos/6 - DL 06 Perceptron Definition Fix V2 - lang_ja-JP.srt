1
00:00:00,000 --> 00:00:01,780
ここで まとめてみましょう

2
00:00:01,780 --> 00:00:05,070
すべての学生のデータがあります

3
00:00:05,070 --> 00:00:09,629
青が合格で 赤が不合格です

4
00:00:09,630 --> 00:00:15,705
モデルの式は２ x テスト
+ グレード - 18です

5
00:00:15,705 --> 00:00:18,390
これにより得点が０のポイントを示し

6
00:00:18,390 --> 00:00:22,140
予測を行う境界が現れます

7
00:00:22,140 --> 00:00:26,445
予測では得点が０以上の場合は合格

8
00:00:26,445 --> 00:00:28,839
得点が０未満の場合は 不合格です

9
00:00:28,839 --> 00:00:31,440
ここでパーセプトロンの
概念について紹介します

10
00:00:31,440 --> 00:00:33,359
これはニューラルネットワークの構成要素で

11
00:00:33,359 --> 00:00:36,310
方程式を小さなグラフに
変換したものにすぎません

12
00:00:36,310 --> 00:00:38,625
次のようにします

13
00:00:38,625 --> 00:00:42,475
今あるデータと境界線をノードに含めます

14
00:00:42,475 --> 00:00:44,760
入力の小さなノードを追加します

15
00:00:44,759 --> 00:00:47,619
この場合はテストとグレードです

16
00:00:47,619 --> 00:00:52,399
テストが７でグレードが
６の例がここにあります

17
00:00:52,399 --> 00:00:55,439
パーセプトロンはポイント
(7, 6)をブロックして

18
00:00:55,439 --> 00:00:59,259
ポイントが正または負のどちら
の領域かをチェックします

19
00:00:59,259 --> 00:01:00,640
ポイントが正の領域であると

20
00:01:00,640 --> 00:01:02,009
「はい」を返します

21
00:01:02,009 --> 00:01:05,784
負の領域であると「いいえ」を返します

22
00:01:05,784 --> 00:01:08,879
思い出してください

23
00:01:08,879 --> 00:01:12,689
方程式は得点 = ２ x テスト + １ x グレード - 18で

24
00:01:12,689 --> 00:01:15,149
得点が０以上の場合 学生は合格

25
00:01:15,150 --> 00:01:17,550
０未満の場合 不合格という 予測になっています

26
00:01:17,549 --> 00:01:20,709
これらの重み２ １ -18は

27
00:01:20,709 --> 00:01:23,849
線形方程式を定義するものです

28
00:01:23,849 --> 00:01:27,596
グラフではラベルとして使います

29
00:01:27,596 --> 00:01:30,409
２と１はX１とX２のエッジに
それぞれラベル付けされます

30
00:01:30,409 --> 00:01:34,484
そしてバイアスユニット - 18が
ノードにラベル付けされます

31
00:01:34,484 --> 00:01:38,655
したがってこれらのラベル付きの
ノードを目にしたときには

32
00:01:38,655 --> 00:01:40,799
生成する線形方程式について
考えることができます

33
00:01:40,799 --> 00:01:44,384
このノードを把握する別の方法はバイアスを
入力の一部として考えるものです

34
00:01:44,385 --> 00:01:48,165
W１にはX１を掛け
W２にはX２を掛けるので

35
00:01:48,165 --> 00:01:51,815
Bには１を掛けるのが自然です

36
00:01:51,814 --> 00:01:54,609
Bのラベル付けと１のエッジが生じます

37
00:01:54,609 --> 00:01:58,983
するとノードは 受信ノードの値を

38
00:01:58,983 --> 00:02:01,890
対応するエッジの値で掛けるのです

39
00:02:01,890 --> 00:02:05,760
加算し最後に

40
00:02:05,760 --> 00:02:07,300
結果が０以上かどうかをチェックします

41
00:02:07,299 --> 00:02:10,240
０以上の場合 ノードは
「はい」か１の値を返します

42
00:02:10,240 --> 00:02:14,260
０未満の場合 ノードは
「いいえ」か０の値を返します

43
00:02:14,259 --> 00:02:18,924
このクラスを通じて両方の表記を使用します

44
00:02:18,925 --> 00:02:20,760
２つ目の方がよく使用されます

45
00:02:20,759 --> 00:02:23,474
一般的には

46
00:02:23,474 --> 00:02:24,948
ノードは次のようになります

47
00:02:24,949 --> 00:02:26,690
ここにノードがあり エンド入力があります

48
00:02:26,689 --> 00:02:29,789
値はX₁からXₙと１です

49
00:02:29,789 --> 00:02:34,344
そして重みW₁からWₙのエッジと

50
00:02:34,344 --> 00:02:38,294
バイアスユニットに一致する b があります

51
00:02:38,294 --> 00:02:42,179
ノードは線形方程式 Wx+b を計算します

52
00:02:42,180 --> 00:02:45,629
これは WiXi+bの

53
00:02:45,629 --> 00:02:49,757
i = １～nの合算です

54
00:02:49,757 --> 00:02:53,545
次にこのノードは値が０以上であるかを
チェックし もしそうなら

55
00:02:53,545 --> 00:02:57,314
ノードは「はい」を示す１の値を返し

56
00:02:57,314 --> 00:03:01,889
そうでないなら

57
00:03:01,889 --> 00:03:05,844
「いいえ」を示す０の値を返します

58
00:03:05,844 --> 00:03:07,650
陰関数を使用していますので
注意してください

59
00:03:07,650 --> 00:03:10,340
ここでは階段関数と呼ばれています

60
00:03:10,340 --> 00:03:14,325
階段関数は入力が０以上の場合１を返し

61
00:03:14,324 --> 00:03:16,919
０未満の場合は０を返します

62
00:03:16,919 --> 00:03:21,389
実際にはパーセプトロンはノードの
組み合わせとして見なすことができます

63
00:03:21,389 --> 00:03:23,879
１つ目のノードは線形方程式と
重みの入力を計算し

64
00:03:23,879 --> 00:03:28,782
２つ目のノードは階段関数を
結果に適用します

65
00:03:28,782 --> 00:03:30,704
これらは次のようにグラフ化できます

66
00:03:30,705 --> 00:03:34,005
合算の印であるΣは１つ目の
ノードの線形関数を示し

67
00:03:34,004 --> 00:03:37,305
描かれているグラフは２つ目の
ノードの階段関数を示すのです

68
00:03:37,305 --> 00:03:40,110
今後は異なる階段関数を使用します

69
00:03:40,110 --> 00:03:43,385
ノードで指定することが
役立つ理由はこれなのです

70
00:03:43,384 --> 00:03:46,284
既に確認したように パーセプトロンを
示す方法は ２つあります

71
00:03:46,284 --> 00:03:50,490
左側には入力ノードの
バイアスユニットがあり値は１です

72
00:03:50,490 --> 00:03:54,370
右にはノード内のバイアスがあります

