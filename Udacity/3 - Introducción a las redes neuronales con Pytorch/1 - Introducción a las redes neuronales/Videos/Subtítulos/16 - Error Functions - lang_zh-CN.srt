1
00:00:00,000 --> 00:00:02,669
对误差函数做个形象的比喻

2
00:00:02,669 --> 00:00:04,139
我们站在一座山上

3
00:00:04,139 --> 00:00:06,870
称之为误差之巅 （译者注：与珠穆朗玛峰音近） 我想下山

4
00:00:06,870 --> 00:00:10,095
但是并不轻松 因为是阴天 而且山非常大

5
00:00:10,095 --> 00:00:12,425
无法看到全貌

6
00:00:12,425 --> 00:00:15,080
我们下山的方式是看看周围

7
00:00:15,080 --> 00:00:18,234
考虑所有下山的可能方向

8
00:00:18,234 --> 00:00:21,429
然后选择一个下降高度最多的方向

9
00:00:21,428 --> 00:00:23,669
假设是这个方向

10
00:00:23,670 --> 00:00:26,100
朝着这个方向迈出一步

11
00:00:26,100 --> 00:00:28,789
高度降低了

12
00:00:28,789 --> 00:00:33,560
而后不断重复这一过程 我们始终在降低高度

13
00:00:33,560 --> 00:00:39,210
直到完全下山 将高度降至最低

14
00:00:39,210 --> 00:00:43,557
这种情况下 我们用来解决问题的关键指标就是高度

15
00:00:43,557 --> 00:00:45,533
我们将高度作为误差

16
00:00:45,533 --> 00:00:48,129
该误差可以告诉我们目前的状况有多差

17
00:00:48,130 --> 00:00:51,234
与理想解决方案的差别有多大

18
00:00:51,234 --> 00:00:54,490
如果我们不断采取措施来降低误差

19
00:00:54,490 --> 00:00:57,715
那么我们最终会解决问题

20
00:01:00,187 --> 00:01:02,734
稍后我们将详细介绍

21
00:01:02,734 --> 00:01:04,878
我们试着用该方法解决一个问题

22
00:01:04,878 --> 00:01:06,693
这个例子中 用什么作为误差函数比较合适？

23
00:01:06,693 --> 00:01:10,088
用什么方式可以很好地告诉计算机当前的误差是多少？

24
00:01:10,088 --> 00:01:13,318
这是我们的直线以及正负区域

25
00:01:13,318 --> 00:01:17,839
问题是如何告诉计算机 现在距离完美的解决方案有多远？

26
00:01:17,839 --> 00:01:20,339
我们可以数一下错误数量

27
00:01:20,339 --> 00:01:21,634
这里有两个错误

28
00:01:21,634 --> 00:01:24,264
这是我们的高度 也就是误差

29
00:01:24,264 --> 00:01:26,374
就像下山一样

30
00:01:26,374 --> 00:01:28,863
我们朝着所有方向看去

31
00:01:28,863 --> 00:01:32,119
看看如何移动直线 以便降低误差

32
00:01:32,119 --> 00:01:33,759
假设朝着这个方向移动

33
00:01:33,759 --> 00:01:37,714
我们使错误数量降到 1 如果再朝着那个方向移动

34
00:01:37,714 --> 00:01:40,264
则使错误数量降到 0

35
00:01:40,264 --> 00:01:43,503
然后就解决问题了 对吧？其实只能说是几乎解决

36
00:01:43,503 --> 00:01:45,484
这个方法有个小问题

37
00:01:45,484 --> 00:01:50,449
在我们的算法中 由于微积分的原理 我们一般采取非常小的步长

38
00:01:50,449 --> 00:01:54,444
这一步长是用导数计算得到的

39
00:01:54,444 --> 00:01:57,064
在这种情况下 采用非常小的步长 会出现什么情况？

40
00:01:57,064 --> 00:02:03,085
一开始有两个错误 然后把直线移动一点 依然有两个错误

41
00:02:03,085 --> 00:02:06,028
再次移动一点 依然有两个错误

42
00:02:06,028 --> 00:02:10,238
再移动一些 依然是两个错误 不断重复下去

43
00:02:10,236 --> 00:02:12,329
这样并不能得到任何进展

44
00:02:12,329 --> 00:02:14,604
这就相当于使用梯度下降

45
00:02:14,604 --> 00:02:17,354
一步步从一座阿兹台克金字塔上走下来

46
00:02:17,354 --> 00:02:19,403
如果站在第二层 有两个错误

47
00:02:19,403 --> 00:02:22,063
我们朝四周看看

48
00:02:22,063 --> 00:02:26,363
我们始终看到两个错误需要减少 我们会感到困惑 不知道该怎么操作

49
00:02:26,361 --> 00:02:28,097
另一方面 在误差之巅

50
00:02:28,099 --> 00:02:31,414
我们可以得到高度的小幅变化

51
00:02:31,414 --> 00:02:35,678
知道哪个方向下降最多

52
00:02:35,677 --> 00:02:39,903
用数学术语描述 为了进行梯度下降

53
00:02:39,903 --> 00:02:44,272
我们的误差函数不能是离散的 而必须是连续的

54
00:02:44,272 --> 00:02:45,829
误差之巅的高度是连续函数

55
00:02:45,829 --> 00:02:49,134
因为位置上的轻微扰动会导致高度发生变化

56
00:02:49,134 --> 00:02:51,569
但是阿兹台克金字塔上就不会这样

57
00:02:51,569 --> 00:02:55,153
因为高度都是以跳跃形式从 2 到 1 而后从 1 到 0

58
00:02:55,153 --> 00:02:57,463
实际上 误差函数必须是可微分的

59
00:02:57,462 --> 00:03:00,003
稍后我们将讲解这一点

60
00:03:00,004 --> 00:03:02,279
我们要做的是

61
00:03:02,278 --> 00:03:05,938
构建一个连续误差函数 构建方法如下

62
00:03:05,939 --> 00:03:10,044
这是六个点 其中四个分类正确

63
00:03:10,044 --> 00:03:12,814
即两个蓝点和两个红点

64
00:03:12,814 --> 00:03:15,354
另外两个分类错误

65
00:03:15,354 --> 00:03:20,164
即最左侧的一个红点和最右侧的一个蓝点

66
00:03:20,164 --> 00:03:23,528
误差函数将向这两个分类错误的点

67
00:03:23,528 --> 00:03:25,923
分配大的罚值

68
00:03:25,921 --> 00:03:29,603
并为四个分类正确的点分配小的罚值

69
00:03:29,604 --> 00:03:33,458
我们将罚值用点的大小表示

70
00:03:33,456 --> 00:03:37,013
当点分类错误时 罚值约等于点离直线的距离

71
00:03:37,014 --> 00:03:42,391
当点分类正确时 则约为 0

72
00:03:42,391 --> 00:03:45,859
稍后我们将学习这一误差公式

73
00:03:45,859 --> 00:03:50,183
现在通过将所有点的误差相加 得到总误差

74
00:03:50,183 --> 00:03:51,444
这里有多个数字

75
00:03:51,444 --> 00:03:54,694
两个分类错误的点使误差增大了很多

76
00:03:54,694 --> 00:03:58,963
现在要移动直线 以便降低该误差

77
00:03:58,963 --> 00:04:02,963
现在可以实现误差函数的连续变化了 我们可以对直线参数进行小改动

78
00:04:02,963 --> 00:04:07,583
可以使误差函数也产生一个小的变化

79
00:04:07,583 --> 00:04:08,603
如果移动直线

80
00:04:08,603 --> 00:04:09,742
例如朝着这个方向

81
00:04:09,742 --> 00:04:12,819
可以看到某些点的误差降低了 另一些稍微增大了

82
00:04:12,819 --> 00:04:14,843
但是对于它们的总和来说

83
00:04:14,843 --> 00:04:18,504
是变小了 因为现在

84
00:04:18,504 --> 00:04:22,814
两个分类错误的点分类正确了

85
00:04:22,814 --> 00:04:26,228
能够构建具有这一属性的误差函数后

86
00:04:26,228 --> 00:04:30,694
就可以使用梯度下降来解决我们的问题了

87
00:04:30,694 --> 00:04:32,449
下面是整个问题的综合描述

88
00:04:32,449 --> 00:04:33,799
我们位于误差之巅

89
00:04:33,799 --> 00:04:37,264
我们站的非常高 误差很大

90
00:04:37,264 --> 00:04:43,093
可以看出 误差是高度 即蓝点和红点之和

91
00:04:43,093 --> 00:04:47,343
我们朝四周看去 看看哪个方向可以使我们下降最多

92
00:04:47,343 --> 00:04:51,218
也就是说 朝哪个方向移动直线可以使误差降低最多

93
00:04:51,218 --> 00:04:54,083
然后朝着这个方向前进一步

94
00:04:54,083 --> 00:04:58,292
对于误差之巅来说 我们向下走了一步 对应该图表而言

95
00:04:58,292 --> 00:05:02,138
我们通过正确分类其中一个点 让误差减小了一些

96
00:05:02,138 --> 00:05:03,468
然后再重复一遍 计算误差

97
00:05:03,468 --> 00:05:07,413
我们朝四周看去 看看哪个方向可以使我们下降最多

98
00:05:07,413 --> 00:05:11,819
然后朝着这个方向前进一步 这样就可以慢慢下山了

99
00:05:11,819 --> 00:05:14,884
在左图中 我们降低了高度

100
00:05:14,884 --> 00:05:17,704
最后成功下山

101
00:05:17,704 --> 00:05:24,884
在右图中 我们将误差降到最低可能值 并对所有点进行了正确分类

102
00:05:24,884 --> 00:05:28,547
现在的问题是 如何定义该误差函数？

103
00:05:28,547 --> 00:05:29,874
这就是接下来的内容

