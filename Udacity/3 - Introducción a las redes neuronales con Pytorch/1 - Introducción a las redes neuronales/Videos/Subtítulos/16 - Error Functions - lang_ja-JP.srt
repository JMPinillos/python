1
00:00:00,000 --> 00:00:02,669
ここに誤差関数の明快な実例があります

2
00:00:02,669 --> 00:00:04,139
私達は山の頂上に立っています

3
00:00:04,139 --> 00:00:06,870
Errorest山です
ここから下りたいのですが

4
00:00:06,870 --> 00:00:10,095
簡単ではありません　雲が多い上に
この山は本当に大きいので

5
00:00:10,095 --> 00:00:12,425
全体像がわかりません

6
00:00:12,425 --> 00:00:15,080
下りるために何をするかというと
周りを見て

7
00:00:15,080 --> 00:00:18,234
歩行可能なあらゆる方向を検討します

8
00:00:18,234 --> 00:00:21,429
そして一番下りられそうな方向を選びます

9
00:00:21,428 --> 00:00:23,669
例えばそれはこの方向だとします

10
00:00:23,670 --> 00:00:26,100
そこでその方向へ一歩進みます

11
00:00:26,100 --> 00:00:28,789
そうやって標高を下げました

12
00:00:28,789 --> 00:00:33,560
歩みを進めて山を完全に降りるまで
標高を下げ続けるという

13
00:00:33,560 --> 00:00:39,210
プロセスを何度も繰り返すと
標高は最小化されます

14
00:00:39,210 --> 00:00:43,558
この場合 問題を解決するために使う
鍵となる物差しは標高です

15
00:00:43,558 --> 00:00:45,533
標高を誤差と呼ぶことにします

16
00:00:45,533 --> 00:00:48,129
誤差によってその時点で
どのぐらいうまくいっていないか

17
00:00:48,130 --> 00:00:51,234
そして理想的な解決から
どのぐらい離れているかが分かります

18
00:00:51,234 --> 00:00:54,490
誤差を減らすべく歩き続けたら

19
00:00:54,490 --> 00:00:57,715
Errorest山から降りるという
私達の問題も

20
00:01:00,187 --> 00:01:02,734
勾配降下法といいます

21
00:01:02,734 --> 00:01:04,878
このアプローチを使って
問題を解いてみましょう

22
00:01:04,878 --> 00:01:06,693
ここではどれが良い誤差関数でしょうか

23
00:01:06,693 --> 00:01:10,088
コンピューターにどのぐらいうまくできて
いないかを伝える良い方法は何でしょうか

24
00:01:10,088 --> 00:01:13,318
ここに線があって
正と負の２つの領域があります

25
00:01:13,318 --> 00:01:17,839
問題は 完璧な解決策からの離れ具合を
コンピューターにどう伝えるかです

26
00:01:17,839 --> 00:01:20,339
間違いの数を数えることもできるでしょう

27
00:01:20,339 --> 00:01:21,634
ここでは間違いが２つあります

28
00:01:21,634 --> 00:01:24,264
これが私達の標高 つまり誤差です

29
00:01:24,264 --> 00:01:26,374
山から下りた時と同じように

30
00:01:26,374 --> 00:01:28,863
線を動かせるあらゆる方向に目を配って

31
00:01:28,863 --> 00:01:32,119
誤差を減らします

32
00:01:32,119 --> 00:01:33,759
この方向に動かすとします

33
00:01:33,759 --> 00:01:37,714
誤差を１に減らすことができます
そしてこの方向に動かすと

34
00:01:37,714 --> 00:01:40,264
誤差の数をゼロに減らせます

35
00:01:40,264 --> 00:01:43,503
大体のところは

36
00:01:43,503 --> 00:01:45,484
できましたが

37
00:01:45,484 --> 00:01:50,449
このアプローチには 小さな問題があります

38
00:01:50,449 --> 00:01:54,444
私達のアルゴリズムでは 歩幅を小さくします

39
00:01:54,444 --> 00:01:57,064
理由は微積分です

40
00:01:57,064 --> 00:02:03,085
私達の小さな歩幅は微分で計算されます

41
00:02:03,085 --> 00:02:06,028
ここで歩幅を小さくすると
何が起きるでしょうか

42
00:02:06,028 --> 00:02:10,238
誤差が２つある状態で始めて 少しだけ
動かします　誤差は２つのままです

43
00:02:10,237 --> 00:02:12,329
また少しだけ動かします
誤差は２つのままです

44
00:02:12,329 --> 00:02:14,604
もう少し動かしても誤差は２つのままです

45
00:02:14,604 --> 00:02:17,354
これを何度も繰り返します

46
00:02:17,354 --> 00:02:19,403
私達ができることはそれほどありません

47
00:02:19,403 --> 00:02:22,063
アステカのピラミッドから
均一の歩幅で下りようとして

48
00:02:22,063 --> 00:02:26,363
勾配降下を使うのと同じです

49
00:02:26,362 --> 00:02:28,098
今２階に立っていて
２つのエラーの誤差が２で

50
00:02:28,099 --> 00:02:31,414
周りを見回してみた場合に

51
00:02:31,414 --> 00:02:35,678
どこを見ても誤差が２では

52
00:02:35,677 --> 00:02:39,903
どうすればいいのか分からないでしょう

53
00:02:39,903 --> 00:02:44,272
一方Errorest山では

54
00:02:44,272 --> 00:02:45,829
高さにとても小さな違いがあることが
分かると

55
00:02:45,829 --> 00:02:49,134
どの方向なら一番下りられるかが
分かるでしょう

56
00:02:49,134 --> 00:02:51,569
数学的には 勾配降下を行うためには
誤差関数はばらばらではなく

57
00:02:51,569 --> 00:02:55,153
連続でなければならないことを意味します

58
00:02:55,153 --> 00:02:57,463
Errorest山は連続しています

59
00:02:57,462 --> 00:03:00,003
私達の位置の小さな変化は
標高の小さな変化に変換されるからです

60
00:03:00,004 --> 00:03:02,279
アステカのピラミッドではそうなりません

61
00:03:02,278 --> 00:03:05,938
標高は２から１や １からゼロへ
大きく飛ぶからです

62
00:03:05,939 --> 00:03:10,044
誤差関数は微分可能であるべきというのは
事実です

63
00:03:10,044 --> 00:03:12,814
それは後ほど詳しく見ます

64
00:03:12,814 --> 00:03:15,354
ここで私達がやるべきことは
次のようにして

65
00:03:15,354 --> 00:03:20,164
連続性がある誤差関数を構築することです

66
00:03:20,164 --> 00:03:23,528
ここに点が６つあり ４つは正しく
分類されています

67
00:03:23,528 --> 00:03:25,923
青色が２つと赤色が２つです

68
00:03:25,922 --> 00:03:29,604
誤って分類されている点が２つあります

69
00:03:29,604 --> 00:03:33,458
一番左にある赤色の点と
一番右にある青色の点です

70
00:03:33,457 --> 00:03:37,014
誤差関数は誤って分類された２つの点に

71
00:03:37,014 --> 00:03:42,392
大きなペナルティを割り当てて

72
00:03:42,392 --> 00:03:45,859
正しく分類された４つの点には小さな
ペナルティを割り当てます

73
00:03:45,859 --> 00:03:50,183
ここでは点の大きさで
ペナルティを表しています

74
00:03:50,183 --> 00:03:51,444
ペナルティは 点の分類が誤っている場合
ほぼ境界線からの距離です

75
00:03:51,444 --> 00:03:54,694
点の分類が正しい場合はほぼゼロです

76
00:03:54,694 --> 00:03:58,963
誤差の式については
このクラスで後ほど学びます

77
00:03:58,963 --> 00:04:02,963
ここで 対応する点の誤差をすべて加えて
誤差の総計を得ます

78
00:04:02,963 --> 00:04:07,583
ここに大きな数があります

79
00:04:07,583 --> 00:04:08,603
誤差を大きくしているのは
誤って分類された２つの点です

80
00:04:08,603 --> 00:04:09,742
ここで考えられるのは誤差を減らすために
線を動かすことです

81
00:04:09,742 --> 00:04:12,819
今なら線を動かせます 線のパラメータに
非常に小さな変化を作れるからです

82
00:04:12,819 --> 00:04:14,843
それが誤差関数での
非常に小さな変化の量になります

83
00:04:14,843 --> 00:04:18,504
ですから線を動かすと

84
00:04:18,504 --> 00:04:22,814
例えばこの方向です

85
00:04:22,814 --> 00:04:26,228
誤差が減るものと 少し増えるものがある
のが分かります

86
00:04:26,228 --> 00:04:30,694
ただし全体的に和を考える場合

87
00:04:30,694 --> 00:04:32,449
和は小さくなりますが それが分かるのは

88
00:04:32,449 --> 00:04:33,799
誤って分類されていた２つの点が正しく
分類されたからです

89
00:04:33,799 --> 00:04:37,264
この特性で 誤差関数を
構築することができれば

90
00:04:37,264 --> 00:04:43,093
問題解決に勾配降下を使うことができます

91
00:04:43,093 --> 00:04:47,343
これが全体です

92
00:04:47,343 --> 00:04:51,218
私たちはErrorest山の頂上にいます

93
00:04:51,218 --> 00:04:54,083
かなり高い所へ来ました なぜなら誤差が
大きかったからです

94
00:04:54,083 --> 00:04:58,292
お分かりのように

95
00:04:58,292 --> 00:05:02,138
誤差が標高で
赤い部分と青い領域の合計です

96
00:05:02,138 --> 00:05:03,468
どの方向が一番下れるかを見て探ります
つまり

97
00:05:03,468 --> 00:05:07,413
誤差を最も減らすにはどの方向に線を
動かせるかを見て

98
00:05:07,413 --> 00:05:11,819
その方向へ一歩進みます

99
00:05:11,819 --> 00:05:14,884
山では一歩下りますが グラフでは
点を正しく分類することで

100
00:05:14,884 --> 00:05:17,704
誤差が少し減ります
これを繰り返します

101
00:05:17,704 --> 00:05:24,884
誤差を計算して

102
00:05:24,884 --> 00:05:28,547
周りを見回して
一番下れるのはどの方向かを見て

103
00:05:28,547 --> 00:05:29,874
その方向へ一歩進んで
山を下ることができます

