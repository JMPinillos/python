1
00:00:00,000 --> 00:00:02,580
ようやく 勾配降下アルゴリズムの

2
00:00:02,580 --> 00:00:05,120
疑似コードを書くツールが準備できました

3
00:00:05,120 --> 00:00:06,830
このようになります

4
00:00:06,830 --> 00:00:15,170
まず w₁からwₙまで およびbのランダムな
ウェイトで始めます

5
00:00:15,170 --> 00:00:19,270
これによって得られる線は

6
00:00:19,270 --> 00:00:22,820
単なる線ではなく
σ(Wx+b)による全体の確率関数です

7
00:00:22,820 --> 00:00:25,150
では各点のエラーを計算します

8
00:00:25,150 --> 00:00:29,230
このように エラーは
誤分類された点では高く

9
00:00:29,230 --> 00:00:32,545
正しく分類された点では小さくなっています

10
00:00:32,545 --> 00:00:36,845
w₁からwₙまでの座標の
すべての点について

11
00:00:36,845 --> 00:00:42,950
学習率αとwᵢに関する誤差関数の
偏導関数の積を足して

12
00:00:42,950 --> 00:00:45,120
wᵢをアップデートします

13
00:00:45,120 --> 00:00:48,440
また  αとbに関する

14
00:00:48,440 --> 00:00:49,920
誤差関数の偏導関数の積を足して
bもアップデートします

15
00:00:49,920 --> 00:00:52,610
これにより新たなウェイトである

16
00:00:52,610 --> 00:00:55,330
wᵢ’ そしてb’が得られます

17
00:00:55,330 --> 00:00:58,605
これらの偏導関数は計算済みですから

18
00:00:58,605 --> 00:01:01,295
これらがwᵢに関する導関数では

19
00:01:01,295 --> 00:01:05,215
(ŷ-y)xᵢであり bに関する導関数では

20
00:01:05,215 --> 00:01:08,840
(ŷ-y)であることが分かっています

21
00:01:08,840 --> 00:01:13,350
以上がウェイトのアップデート方法です

22
00:01:13,350 --> 00:01:15,765
これをエラーが小さくなるまで繰り返すか

23
00:01:15,765 --> 00:01:18,840
または所定の回数繰り返すことができます

24
00:01:18,840 --> 00:01:20,100
この回数をエポックと呼びますが
これについては後で学習します

25
00:01:20,100 --> 00:01:21,935
どこかでこれに似たものを

26
00:01:21,935 --> 00:01:24,300
見た気がしませんか？

27
00:01:24,300 --> 00:01:26,640
各点を見ると 各点が行っているのは

28
00:01:26,640 --> 00:01:31,640
自身の倍数を線のウェイトに足して

29
00:01:31,640 --> 00:01:34,435
誤分類されている場合に 線をその点に
近づけるということです

30
00:01:34,435 --> 00:01:36,000
これは パーセプトロンアルゴリズムと
ほぼ同じです

31
00:01:36,000 --> 00:01:39,000
次の動画では
これらがどの程度似ているのか

