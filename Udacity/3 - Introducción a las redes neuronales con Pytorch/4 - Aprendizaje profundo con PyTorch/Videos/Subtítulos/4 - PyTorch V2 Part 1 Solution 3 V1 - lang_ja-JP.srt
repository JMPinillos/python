1
00:00:00,000 --> 00:00:03,690
それでは 演習の解答例を確認しましょう

2
00:00:03,690 --> 00:00:06,960
定義した重みと機能で

3
00:00:06,960 --> 00:00:11,905
多層ネットワークの出力を 計算してもらいました

4
00:00:11,904 --> 00:00:14,160
これは以前の 単層のニューラル
ネットワークでの作業と似ています

5
00:00:14,160 --> 00:00:16,769
基本的には 機能と重み行列

6
00:00:16,769 --> 00:00:20,370
最初の重み行列を取得し

7
00:00:20,370 --> 00:00:21,630
行列の乗算を行います

8
00:00:21,629 --> 00:00:24,945
これが（torch.mm+B1）で

9
00:00:24,945 --> 00:00:27,839
これで隠れ層hの値が得られます

10
00:00:27,839 --> 00:00:32,219
値hは ネットワークの次層の入力として使用できます

11
00:00:32,219 --> 00:00:37,879
ここでも 隠れ層の値hと

12
00:00:37,880 --> 00:00:39,500
第２重み行列W2の行列乗算

13
00:00:39,500 --> 00:00:42,590
バイアス項を加算して 出力を得ます

14
00:00:42,590 --> 00:00:45,380
PyTorchesの利点は

15
00:00:45,380 --> 00:00:48,880
簡単に Numpy配列と Torchテンソルの間で

16
00:00:48,880 --> 00:00:52,100
変換が行えることです

17
00:00:52,100 --> 00:00:54,920
これは非常に便利です

18
00:00:54,920 --> 00:00:58,480
多くの場合 データを準備し

19
00:00:58,479 --> 00:01:00,469
Numpyで事前に処理を行い

20
00:01:00,469 --> 00:01:05,120
ネットワークに移動する必要性も高く

21
00:01:05,120 --> 00:01:07,640
そのためには 使用するNumpy配列と

22
00:01:07,640 --> 00:01:11,170
Torchテンセルを

23
00:01:11,170 --> 00:01:12,750
ブリッジしなければならないからです

24
00:01:12,750 --> 00:01:17,015
このために

25
00:01:17,015 --> 00:01:18,560
torch.fromnumpyを使って
Numpy配列からテンソルを取得できます

26
00:01:18,560 --> 00:01:25,115
ここでは４x３のランダム配列を作成

27
00:01:25,114 --> 00:01:28,909
次に from Numpyを実行し

28
00:01:28,909 --> 00:01:31,159
配列を渡して Torchテンセルを作ります

29
00:01:31,159 --> 00:01:35,280
これは 私たちにとって好都合です

30
00:01:35,280 --> 00:01:37,564
これは PyTorchのテンソルであり

31
00:01:37,564 --> 00:01:38,959
すべてのTorchメソッドや
ニューラルネットワークで使用できます

32
00:01:38,959 --> 00:01:43,564
逆方向に進めるので

33
00:01:43,564 --> 00:01:45,594
このbなどのテンソルを 取ることができます

34
00:01:45,594 --> 00:01:47,079
これはTorchテンソルで b.numpyで
Numpy配列に戻れます

35
00:01:47,079 --> 00:01:50,329
これでNumpy配列が返されます

36
00:01:50,329 --> 00:01:54,620
メモリはNumpy配列と Torchテンソルで
共有されていることに 注意しましょう

37
00:01:54,620 --> 00:01:57,085
すなわち Numpy配列かテンソルの
いずれかで操作を行うと

38
00:01:57,084 --> 00:01:59,000
もう一方の値も 変わるということです

39
00:01:59,000 --> 00:02:04,594
例えば ２を掛けるこのインプレース操作は

40
00:02:04,594 --> 00:02:07,819
メモリ内の値を変更することを意味し

41
00:02:07,819 --> 00:02:11,840
新テンセルを作るのではなく

42
00:02:11,840 --> 00:02:13,825
Numpy配列内の値は 実際に変更されます

43
00:02:13,824 --> 00:02:19,129
ここにNumpy配列があります

44
00:02:19,129 --> 00:02:22,219
最初は このように

45
00:02:22,219 --> 00:02:24,849
まず Torchテンソルに変換します

46
00:02:24,849 --> 00:02:29,930
ここで インプレース乗算を行い

47
00:02:29,930 --> 00:02:32,189
このテンソルの値を変更します

48
00:02:32,189 --> 00:02:34,115
次に Numpy配列を見ると

49
00:02:34,115 --> 00:02:37,070
値が変更されています

50
00:02:37,069 --> 00:02:39,245
実行の際にこれは覚えておくべきです

51
00:02:39,245 --> 00:02:42,560
テンソルでの操作で値が
変更されても 驚く必要はありません

52
00:02:42,560 --> 00:02:44,509
それでは 次の動画で

53
00:02:44,509 --> 00:02:46,344
では！

