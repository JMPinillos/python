1
00:00:00,000 --> 00:00:04,065
画像データのロード方法の紹介です

2
00:00:04,065 --> 00:00:08,670
実際のプロジェクトで役立つものです

3
00:00:08,669 --> 00:00:10,800
以前は ネットワークのテスト用に

4
00:00:10,800 --> 00:00:16,125
MNISTのミニデータを 使用していましたが

5
00:00:16,125 --> 00:00:20,550
今回は フルサイズで 実際のディープラーニングの

6
00:00:20,550 --> 00:00:25,475
プロジェクトで使用するような写真を用います

7
00:00:25,475 --> 00:00:30,375
Kaggle内のかわいい猫と犬の画像の
データセットを使いますが

8
00:00:30,375 --> 00:00:33,030
Kaggleの詳細は リンク先を参照して下さい

9
00:00:33,030 --> 00:00:34,350
画像が大きく 高解像度で

10
00:00:34,350 --> 00:00:37,480
MNISTとは異なる形と サイズで
提供されていることがわかります

11
00:00:37,479 --> 00:00:39,599
まずは PyTorchへの画像のロードです

12
00:00:39,600 --> 00:00:44,609
次に 画像を使い

13
00:00:44,609 --> 00:00:49,335
ネットワークのトレーニングを行います

14
00:00:49,335 --> 00:00:50,880
torchvisionのdatasets.ImageFolderを使うと

15
00:00:50,880 --> 00:00:54,165
ロードが簡単です

16
00:00:54,164 --> 00:00:58,304
基本的にデータが入っているフォルダへの

17
00:00:58,304 --> 00:01:01,019
パスを指定するだけです

18
00:01:01,020 --> 00:01:05,480
そこには 以前お話した「変換」が入ります

19
00:01:05,480 --> 00:01:07,130
変換については 次に説明します

20
00:01:07,129 --> 00:01:10,159
画像フォルダでは

21
00:01:10,159 --> 00:01:11,420
ファイルとディレクトリは
こうなっている必要があります

22
00:01:11,420 --> 00:01:14,950
ここに全データを含む ルートディレクトリがあり

23
00:01:14,950 --> 00:01:16,600
各クラスに独自のフォルダがあります

24
00:01:16,599 --> 00:01:19,354
今回のクラスは２つです

25
00:01:19,355 --> 00:01:22,609
犬と猫の

26
00:01:22,609 --> 00:01:25,635
２つのフォルダ（犬と猫）があります

27
00:01:25,635 --> 00:01:28,020
MNISTの様に 多くのクラスを持つこともできます

28
00:01:28,019 --> 00:01:29,280
数字ごとに１つのフォルダがあります

29
00:01:29,280 --> 00:01:32,030
これは クラスまたはラベルです

30
00:01:32,030 --> 00:01:34,625
次に 特定の各クラスフォルダ内に

31
00:01:34,625 --> 00:01:35,659
クラスに属する画像があります

32
00:01:35,659 --> 00:01:39,450
犬のフォルダには 犬の写真
猫のフォルダには 猫の写真です

33
00:01:39,450 --> 00:01:41,385
ワークスペースで作業中なら

34
00:01:41,385 --> 00:01:45,660
データはそこにあるはずですが

35
00:01:45,659 --> 00:01:48,795
ローカルで作業中なら

36
00:01:48,795 --> 00:01:50,579
ここをクリックしてデータを取得できます

37
00:01:50,579 --> 00:01:53,939
また既にトレーニングとテストセットに
分割済みです

38
00:01:53,939 --> 00:01:56,204
画像フォルダにロード時は

39
00:01:56,204 --> 00:01:57,870
変換の定義が必要です

40
00:01:57,870 --> 00:01:59,760
サイズの変更 トリミング

41
00:01:59,760 --> 00:02:01,665
PyTorchテンソルへの変換
Pillow画像としての読み込みなど

42
00:02:01,665 --> 00:02:05,220
さまざまなことができます

43
00:02:05,219 --> 00:02:07,004
まず 画像をテンソルへ変換します

44
00:02:07,004 --> 00:02:09,180
次に transforms.composeを使い
変換を結合します

45
00:02:09,180 --> 00:02:13,135
画像サイズを 255 x 255に変更する場合

46
00:02:13,134 --> 00:02:17,479
transforms.resize 255と記述し

47
00:02:17,479 --> 00:02:22,060
中央だけを 224 x224サイズで切り取ります

48
00:02:22,060 --> 00:02:24,580
それをテンソルに変換します

49
00:02:24,580 --> 00:02:27,320
これをImageFolderに渡して

50
00:02:27,319 --> 00:02:30,489
画像に対して実行する変換を定義します

51
00:02:30,490 --> 00:02:34,879
画像フォルダからデータセットを取得したら

52
00:02:34,879 --> 00:02:39,500
変換を定義し データローダに渡します

53
00:02:39,500 --> 00:02:43,099
ここからバッチサイズを定義できます

54
00:02:43,099 --> 00:02:45,120
これは バッチごとに取得する画像数です

55
00:02:45,120 --> 00:02:49,295
シャッフルを行うかなどの 設定などもできます

56
00:02:49,294 --> 00:02:54,224
シャッフルはエポックごとに

57
00:02:54,224 --> 00:02:58,305
データをランダムに混ぜる機能です

58
00:02:58,305 --> 00:03:01,830
ネットワークのトレーニングを複数回行う際

59
00:03:01,830 --> 00:03:04,410
その度に 画像は別の順序で
表示したいですから

60
00:03:04,409 --> 00:03:07,680
この機能は 便利です

61
00:03:07,680 --> 00:03:13,125
毎回 同じ順序で学習すると

62
00:03:13,125 --> 00:03:15,134
学習方法に 悪い影響を与える可能性があるためです

63
00:03:15,134 --> 00:03:18,509
また データローダオブジェクト自体が
ジェネレータであるため

64
00:03:18,509 --> 00:03:23,174
データ取得のために forなどでループさせるか

65
00:03:23,175 --> 00:03:28,530
イテレータに変換するため iterを使用し
nextを呼び出す必要があります

66
00:03:28,530 --> 00:03:31,064
このforループでしていることは

67
00:03:31,064 --> 00:03:35,370
データローダのイテレータへの変換です

68
00:03:35,370 --> 00:03:39,944
ループ通過ごとに nextを呼び出します

69
00:03:39,944 --> 00:03:41,625
このforループは これを自動的に行います

70
00:03:41,625 --> 00:03:44,280
ここまで 変換の定義 画像フォルダ
データローダの作成等を説明してきました

71
00:03:44,280 --> 00:03:47,580
すべてを正しく行うと

72
00:03:47,580 --> 00:03:51,825
こうした画像が表示されるでしょう

73
00:03:51,824 --> 00:03:56,159
これが基本的なデータロード法です

74
00:03:56,159 --> 00:03:57,314
データ拡張も実行できます

75
00:03:57,314 --> 00:04:01,259
これは データ自体にランダム性を
導入するということです

76
00:04:01,259 --> 00:04:04,359
できることは

77
00:04:04,360 --> 00:04:09,160
画像の猫がいる場所の転換
画像の回転 被写体の大きさの変更

78
00:04:09,159 --> 00:04:11,395
トリミング 水平 垂直方向への
ミラーリングなどができます

79
00:04:11,395 --> 00:04:14,795
これは 画像を様々な縮尺
方向などで表示することで

80
00:04:14,794 --> 00:04:18,519
ネットワークを一般化するのに役立ちます

81
00:04:18,519 --> 00:04:23,589
これは ネットワークトレーニングに

82
00:04:23,589 --> 00:04:25,389
大いに役立ち 検証テストの精度を向上させます

83
00:04:25,389 --> 00:04:29,324
ここでは トレーニングデータの変換を定義します

84
00:04:29,324 --> 00:04:32,649
画像をランダムにトリミング

85
00:04:32,649 --> 00:04:35,389
サイズ変更 回転し テストデータセットの

86
00:04:35,389 --> 00:04:41,870
変換を定義するデータ拡張を行います

87
00:04:41,870 --> 00:04:45,259
検証テストでは データ拡張は実行しません

88
00:04:45,259 --> 00:04:49,399
このことを覚えておいてください

89
00:04:49,399 --> 00:04:50,614
つまり 画像サイズ変更と
トリミングを行うだけとなります

90
00:04:50,615 --> 00:04:52,925
これは 検証をモデルの状態のように

91
00:04:52,925 --> 00:04:55,449
最終的なものに 近い状態にする必要があるためです

92
00:04:55,449 --> 00:04:58,849
データトレーニング後は

93
00:04:58,850 --> 00:05:02,550
猫と犬の写真が送信されます

94
00:05:02,550 --> 00:05:05,500
そのため 検証セットが最終的な入力画像と

95
00:05:05,500 --> 00:05:09,959
ほぼ同様に見える必要があります

96
00:05:09,959 --> 00:05:14,819
これらを正しく行うと トレーニング例はこうなります

97
00:05:14,819 --> 00:05:18,899
どう回転されたか確認できます

98
00:05:18,899 --> 00:05:20,879
テスト例は 比例的に
スケーリングされ 回転されていません

99
00:05:20,879 --> 00:05:25,199
データをロードしたら

100
00:05:25,199 --> 00:05:30,149
学んだことを基に ネットワークを構築し

101
00:05:30,149 --> 00:05:33,719
データセットから 画像の分類を行います

102
00:05:33,720 --> 00:05:36,660
これは実際難しく うまくいかないことが多いので

103
00:05:36,660 --> 00:05:42,495
無理する必要はありません

104
00:05:42,495 --> 00:05:45,949
以前 MNISTを使用しましたが

105
00:05:45,949 --> 00:05:49,469
それらはシンプルな画像でした

106
00:05:49,470 --> 00:05:50,580
サイズは 20x28で

107
00:05:50,579 --> 00:05:53,219
グレースケールカラーでした

108
00:05:53,220 --> 00:05:56,000
今回の画像はずっと大きく

109
00:05:56,000 --> 00:06:00,370
３つの色成分が使われています

110
00:06:00,370 --> 00:06:02,139
一般的に 完全に接続されたネットワークのみで

111
00:06:02,139 --> 00:06:04,490
分類を行うことは
非常に困難です

112
00:06:04,490 --> 00:06:06,530
次回は トレーニング済のネットワークで

113
00:06:06,529 --> 00:06:08,614
分類モデルを構築する方法を紹介します

114
00:06:08,615 --> 00:06:13,280
それでは！

