1
00:00:00,000 --> 00:00:05,669
dropoutを使ってネットワークを構築し
トレーニングする方法を説明します

2
00:00:05,669 --> 00:00:06,974
以前説明したように

3
00:00:06,974 --> 00:00:10,589
dropoutモジュールを
self.dropoutとして定義してから

4
00:00:10,589 --> 00:00:14,984
nn.Dropoutとして定義して
ドロップの確率をいくつか得ます

5
00:00:14,984 --> 00:00:16,320
この場合は 20%で

6
00:00:16,320 --> 00:00:20,894
フォワードメソッドを各隠れ層に 追加するだけです

7
00:00:20,894 --> 00:00:23,960
model.evalを利用していることを除いて

8
00:00:23,960 --> 00:00:26,750
検証コードは基本的に前と同じです

9
00:00:26,750 --> 00:00:29,315
したがって これは
モデルを評価モードまたは

10
00:00:29,315 --> 00:00:32,725
介入モードに変換し これは
dropoutをオフにします

11
00:00:32,725 --> 00:00:34,890
次に前と同じように

12
00:00:34,890 --> 00:00:37,255
データ全体を処理してテストが

13
00:00:37,255 --> 00:00:40,820
損失と精度を計算します その後

14
00:00:40,820 --> 00:00:44,465
model.trainを行って
モデルをtrainモードに戻し

15
00:00:44,465 --> 00:00:47,080
dropoutをオンに戻してから

16
00:00:47,079 --> 00:00:48,859
Trainを継続します

17
00:00:48,859 --> 00:00:52,774
dropoutを使っていて

18
00:00:52,774 --> 00:00:57,460
トレーニングしているこれらのエポックの
損失と 検証の損失を見ると

19
00:00:57,460 --> 00:01:00,140
トレーニングに伴い 検証の損失がトレーニングの
損失に近くなっていると確認できます

20
00:01:00,140 --> 00:01:03,445
dropoutで少なくとも過剰適合を
軽減できました

21
00:01:03,445 --> 00:01:07,805
検証の損失は dropoutなしの
時ほど低くなっていません

22
00:01:07,805 --> 00:01:15,395
まだドロップしていることを確認できます

23
00:01:15,394 --> 00:01:17,609
長く続けると

24
00:01:17,609 --> 00:01:19,840
検証の損失は dropoutなしよりも
低くなる可能性が高いです

